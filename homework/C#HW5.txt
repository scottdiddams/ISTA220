##C#HW05

1. What is a compound assignment operator? How does it work?

*a shorter syntax to assign the result of an operation involving two operands*
``` 7 += 3```
*is the same as*
```7 + 3 =```

2. List all the compound assignment operators.
```
	+=
Addition Assignment
	-=
Subtraction Assignment
	*=
Multiplication Assignment
	/=
Division Assignment
	%=
Modulo Assignment
	&=
Bitwise AND Assignment
	|=
Bitwise OR Assignment
	^=
Bitwise XOR Assignment
	<<=
Left Shift Assignment
	>>=
Right Shift Assignment
	=>
Lambda Operator
```

3. List two ways to increment a numeric variable by 5. List two ways to decrement a numeric variable by
50.

*X = X + 5; or X += 5*
*X =x - 50; or X -=50*

4. How long does a while loop run?

*as long as a predicate condition is true*

5. What is an iteratiion variable? (Not in book)

*the variable that changes each time the loop executes and ultimately determines when the loop ends (ie i++)*

6. What happens if you don’t change the loop variable in the body of the while loop block?

*the loop variable controls the flow of the loop usually by being set to increment - if it does not change, the loop continues forever*

7. How many parts does a for loop statement have? Can you omit any of them? Can you omit all of
them? What happens if you omit all of them?

* initializer, condition, iterator - all are optional*
```for (int i = 0; i<numGrades; i++)...```

8. How do you guarantee that a loop runs at least once?

*use a do while loop to ensure a loop is evaluated at least once, or ensure the initial condition of a for loop is true**

9. What does the break statement do?

*the break statement terminates the closest enclosing loop or switch statemente in which it appears*

10. What does the continue statement do?

*the continue statement passes control to the next iteration of the enclosing while, do, for, or foreach statement*

11. (Thought question) Can you think of any reason why you would want to have an infinite loop? An
“infinite loop” is a loop without an update variable that in effect runs forever. As you will see, these
kinds of loops are written intentionally to perform various kinds of tasks

*Infinite loops are used when you want a program to continue executing indefinetely, or presumably, until the hardware fails/destructs - could be used in guided munitions or other 'one-way' pieces of equipment*

*Convert to octal from base 10*
```
75 % 8 = 3
75 / 8 = 9
-----------
9 % 8 = 1
9 / 8 = 1
-----------
1 % 8 = 1
1 / 8 = 0 //Once you reach zero, the octal form is the concatenation of the 

//Convert octal (ie 135) to decimal (93)
8^0 = 1		1*5 = 5
8^1 = 8		8*3 = 24
8^2 = 64	64*1 = 64
8^3 = 512	--
			64+24+5 = 93


//binary - "one's compliment"
//0 = positive or zero
//1 = negative

//if the first digit to the left is 1, flip digits for a negative number
0000 = 0
0001 = 1
0010 = 2
0011 = 3
...
0111 = 7
1000 = -7
...
1100 = -3
0100 = -2
1000 = -1

